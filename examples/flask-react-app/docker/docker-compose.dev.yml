version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=sqlite:///app.db
      - JWT_SECRET_KEY=dev-secret-key
      - CORS_ORIGINS=http://localhost:3000
    volumes:
      - ../backend:/app
      - backend-data:/app/instance
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database (for production-like testing)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=flaskapp
      - POSTGRES_USER=flaskuser
      - POSTGRES_PASSWORD=flaskpass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flaskuser -d flaskapp"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - postgres

  # Redis (for caching/sessions)
  redis:
    image: redis:7-alpine
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - redis

networks:
  app-network:
    driver: bridge

volumes:
  backend-data:
  postgres-data: